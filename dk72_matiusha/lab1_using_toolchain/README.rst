
=============================================
Лабораторна робота №1
=============================================

Тема
------

Налаштування середовища розробки (Linux, Quartus, Incisive), тестовий проект



Хід роботи
-------


**Налаштування середовища.** У процесі лабораторної роботи потрібно було отримати робочу Linux-систему, а також встановлення Quartus 13 SP1 та Cadence Incisive 15.10.
До початку виконання лабораторної я мав встановлений ArchLinux у якості основної ОС, а також встановлений Quartus 13, тому перейшов зразу до встановлення симулятора Incisive. Процес встановлення за відео був неважкий та зайняв близько години.


**Створення тестового проекту.** Я повторив проект з відео у тестовій директорії, потім приступив до виконання основного завдання. Завданням
було створити 32-розрядний регістр з асинхронним, синхронним скиданнями та входом дозволу у форматі ``bdf``. Я створив такий проект, використавши
мультиплексори з бібліотеки мегафункцій та сконфігурувавши його через MegaWizard. Після синтезу проекту я експортував його у Verilog файл
та написав простий Testbench, що тестував можливості запису у регістр, його синхронного та асинхронного скидання. Після цього я відкрив директорію
проекту у ``nclaunch``, скомпілював потрібні Verilog файли, виконав elaborate інстансу ``test`` та запустив ``work.test:module`` на симуляцію.
На виході симуляції після кількох невдалих спроб і корекції помилок отримав поведінку, що відповідала очікуванням.

Після цього я написав реалізацію цього самого регістра на Verilog, що було набагато компактніше і зайняло набагато менше часу. 
Ця реалізація запрацювала з тим самим тестбенчем відразу і без помилок.

.. image:: doc/reg32.png
Так виглядає RTL схема цього регістра, написаного на Verilog

.. image:: doc/reg32_sync_reset.png
Так виглядає RTL схема, реалізована у схемному редакторі з використанням мегафункції мультиплексора.





За функціональністю ці схеми не відрізняються.


Висновки
-------

Висновки можна зробити такі: створення більш-менш складних схем за допомогою схемного редактора 
перетворюється в дуже складну задачу, що може приводити до великої кількості складно відловлюваних помилок або багів.
Verilog завдяки простоті, модульності та компактності дуже добре підходить для таких задач як в плані розробки, так і в плані верифікації, тому краще використовувати саме його.









